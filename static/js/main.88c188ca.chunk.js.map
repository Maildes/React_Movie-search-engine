{"version":3,"sources":["assets/img/poster_none.png","helpers/api/api.js","redux/loading.js","redux/error.js","redux/details.js","redux/movies.js","redux/filter.js","redux/currentPage.js","redux/historySearch.js","redux/movieImdb.js","redux/store.js","components/Loader/Loader.js","components/MovieDetails/MovieDetails.js","components/MovieForm/MovieForm.js","components/MovieCard/MovieCard.js","components/MovieList/MovieList.js","components/Pagination/Pagination.js","components/HistorySearch/HistorySearch.js","helpers/HelloMarakas.js","components/MainPage/MainPage.js","App.js","index.js"],"names":["module","exports","API","getMovies","movie","page","a","fetch","movies","json","getMoviesDetails","id","setLoading","status","type","loadingReducer","loading","action","setError","errorMassage","errorReducer","error","setDetails","details","detailsReducer","setMovies","moviesReducer","setFilter","query","filterReducer","setPage","currentPageReducer","currentPage","historyReducer","historySearch","slice","length","movieIdReducer","imdbId","state","getDetails","getLoading","getError","getFilter","getCurrentPage","getHistorySearch","getMovieId","rootReducer","combineReducers","persistedState","localStorage","getItem","JSON","parse","store","createStore","subscribe","setItem","stringify","getState","Loader","className","MovieDetails","history","dispatch","useDispatch","isId","useSelector","isMovie","isLoading","loadMovieDetails","api","then","Response","Error","useEffect","onClick","goBack","src","Poster","Logo","alt","Title","Year","imdbRating","Country","Genre","Runtime","Director","Writer","Actors","Language","Production","Plot","MovieForm","errorNotice","setErrorNotice","useState","value","setValue","onSubmit","event","preventDefault","handleSubmit","cn","trimLeft","placeholder","onChange","e","target","MovieCard","map","Type","imdbID","key","to","MovieList","Pagination","totalMovies","numbers","lastPageNumber","Math","ceil","changePage","i","push","disabled","aria-label","number","window","scrollTo","HistorySearch","handleClear","HelloMarakas","MainPage","movieTitle","notice","setNotice","setTotalMovies","loadMovies","moviesFromServer","Search","totalResults","includes","setNewSearchMovie","clear","App","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.88c188ca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/poster_none.d38bc38a.png\";","const API = `https://www.omdbapi.com/`;\r\nconst API_KEY = '8a5fc427';\r\n\r\nexport const getMovies = async(movie, page) => {\r\n    const movies = await fetch(`${API}?s=${movie}&page=${page}&apikey=${API_KEY}`)\r\n\r\n    return movies.json();\r\n};\r\n\r\n\r\nexport const getMoviesDetails = async(id) => {\r\n    const movie = await fetch(`${API}?i=${id}&plot=full&apikey=${API_KEY}`)\r\n    \r\n    return movie.json();\r\n}\r\n","const SET_LOADING = 'SET_LOADING';\r\n\r\nexport const setLoading = (status) => ({ type: SET_LOADING, status });\r\n\r\nconst loadingReducer = (loading = false, action) => {\r\n  switch (action.type) {\r\n    case SET_LOADING:\r\n      return action.status;\r\n    \r\n    default:\r\n      return loading;\r\n  }\r\n};\r\n\r\nexport default loadingReducer;\r\n","const SET_ERROR = 'SET_ERROR';\r\n\r\nexport const setError = errorMassage => ({ type: SET_ERROR, errorMassage });\r\n\r\nconst errorReducer = (error = '', action) => {\r\n  switch (action.type) {\r\n    case SET_ERROR:\r\n      return action.errorMassage;\r\n    \r\n    default:\r\n      return error;\r\n  }\r\n};\r\n\r\nexport default errorReducer;\r\n","const SET_DETAILS = 'SET_DETAILS';\r\n\r\nexport const setDetails = (details) => ({ type: SET_DETAILS, details });\r\n\r\nconst detailsReducer = (details = {}, action) => {\r\n  switch (action.type) {\r\n    case SET_DETAILS:\r\n      return action.details;\r\n    \r\n    default:\r\n      return details;\r\n  }\r\n};\r\n\r\nexport default detailsReducer;\r\n","const SET_MOVIES = 'initMovies';\r\nconst SET_CLEAR_MOVIES = 'SET_CLEAR_MOVIES';\r\n\r\nexport const setMovies = movies => ({ type: SET_MOVIES, movies });\r\nexport const setClearMovies = () => ({ type: SET_CLEAR_MOVIES });\r\n\r\nconst moviesReducer = (movies = [], action) => {\r\n    switch (action.type) {\r\n        case SET_MOVIES:\r\n            return action.movies;\r\n        \r\n        case SET_CLEAR_MOVIES:\r\n            return [];\r\n\r\n        default:\r\n            return movies;\r\n    }\r\n};\r\n\r\nexport default moviesReducer;\r\n","const SET_FILTER = 'SET_FILTER';\r\n\r\nexport const setFilter = query => ({ type: SET_FILTER, query });\r\n\r\nconst filterReducer = (query = '', action) => {\r\n  switch (action.type) {\r\n    case SET_FILTER:\r\n      return action.query;\r\n      \r\n    default:\r\n      return query;\r\n  }\r\n};\r\n\r\nexport default filterReducer;\r\n","const SET_PAGE = 'SET_PAGE';\r\n\r\nexport const setPage = page => ({ type: SET_PAGE, page });\r\n\r\nconst currentPageReducer = (currentPage = 1, action) => {\r\n  switch (action.type) {\r\n    case SET_PAGE:\r\n      return action.page;\r\n    \r\n    default:\r\n      return currentPage;\r\n  }\r\n};\r\n\r\nexport default currentPageReducer;\r\n","const SET_SEARCH_MOVIE = 'SET_SEARCH_MOVIE';\r\nconst CLEAR = 'CLEAR';\r\nconst REFRESH = 'REFRESH';\r\n\r\nexport const setNewSearchMovie = (query) => ({ type: SET_SEARCH_MOVIE, query });\r\nexport const clearSearchMovie = () => ({ type: CLEAR});\r\nexport const refreshSearchMovie = (query) => ({ type: REFRESH, query });\r\n\r\nconst historyReducer = (historySearch = [], action) => {\r\n  switch (action.type) {\r\n    case SET_SEARCH_MOVIE:\r\n      return [...historySearch, action.query];\r\n      \r\n    case  CLEAR:\r\n      return [];\r\n      \r\n    case REFRESH:\r\n      return [...historySearch.slice(historySearch.length - 1), action.query];\r\n    \r\n    default:\r\n      return historySearch;\r\n  }\r\n};\r\n\r\nexport default historyReducer;\r\n","const SET_MOVIE_ID = 'IMDB_ID';\r\n\r\nexport const setMovieId = imdbId => ({ type: SET_MOVIE_ID, imdbId });\r\n\r\nconst movieIdReducer = (id = '', action) => {\r\n  switch (action.type) {\r\n    case SET_MOVIE_ID:\r\n      return action.imdbId;\r\n    \r\n    default:\r\n      return id;\r\n  }\r\n};\r\n\r\nexport default movieIdReducer;\r\n","import { createStore, combineReducers } from 'redux';\r\nimport moviesReducer from './movies';\r\nimport detailsReducer from './details';\r\nimport loadingReducer from './loading';\r\nimport errorReducer from './error';\r\nimport filterReducer from './filter';\r\nimport currentPageReducer from './currentPage';\r\nimport historyReducer from './historySearch'\r\nimport movieIdReducer from './movieImdb'\r\n\r\n// Selector\r\nexport const getMovies = state => state.movies;\r\nexport const getDetails = state => state.details;\r\nexport const getLoading = state => state.loading;\r\nexport const getError = state => state.error;\r\nexport const getFilter = state => state.query;\r\nexport const getCurrentPage = state => state.currentPage;\r\nexport const getHistorySearch = state => state.historySearch;\r\nexport const getMovieId = state => state.id;\r\n\r\nconst rootReducer = combineReducers({\r\n    movies: moviesReducer,\r\n    details: detailsReducer,\r\n    loading: loadingReducer,\r\n    error: errorReducer,\r\n    query: filterReducer,\r\n    currentPage: currentPageReducer,\r\n    historySearch: historyReducer,\r\n    id: movieIdReducer,\r\n});\r\n\r\nconst persistedState = localStorage.getItem('reduxState')\r\n  ? JSON.parse(localStorage.getItem('reduxState') || '')\r\n  : {};\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  persistedState,\r\n);\r\n\r\nstore.subscribe(() => {\r\n    localStorage.setItem('reduxState', JSON.stringify(store.getState()));\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport './Loader.scss';\r\n\r\nexport const Loader = () => (\r\n    <div className=\"Loader\">\r\n        <div className=\"Loader__content\" />\r\n    </div>\r\n);\r\n","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport * as api from '../../helpers/api/api';\r\n\r\nimport './MovieDetails.scss';\r\n\r\nimport { setLoading } from '../../redux/loading';\r\nimport { setError } from '../../redux/error';\r\nimport { setDetails } from '../../redux/details';\r\n\r\nimport { getDetails, getLoading, getMovieId } from '../../redux/store';\r\nimport { Loader } from \"../Loader/Loader\";\r\nimport Logo from \"../../assets/img/poster_none.png\";\r\n\r\nexport const MovieDetails = ({ history }) => {\r\n  const dispatch = useDispatch();\r\n  const isId = useSelector(getMovieId);\r\n  const isMovie = useSelector(getDetails)\r\n  const isLoading = useSelector(getLoading);\r\n  \r\n  const loadMovieDetails = async() => {\r\n    dispatch(setLoading(true));\r\n    \r\n    try {\r\n      api.getMoviesDetails(isId)\r\n        .then((movie) => {\r\n          if (movie.Response === 'False') {\r\n            setError(movie.Error);\r\n          }\r\n          const action = setDetails(movie);\r\n          \r\n          dispatch(action);\r\n          dispatch(setLoading(false));\r\n        })\r\n    } catch (error) {\r\n      dispatch(setError('Loading error'));\r\n      dispatch(setLoading(false));\r\n    }\r\n  };\r\n  \r\n  useEffect(() => {\r\n    loadMovieDetails();\r\n  }, [isId]);\r\n  \r\n  return (\r\n    <section className=\"movie movie__info\">\r\n      {!isLoading ?\r\n        <>\r\n          <button\r\n            className=\"movie__button--back\"\r\n            onClick={() => history.goBack()}\r\n          >\r\n            Back\r\n          </button>\r\n          <div className=\"movie__logo\">\r\n              <img\r\n                className=\"movie__img\"\r\n                src={isMovie.Poster !== \"N/A\" ? isMovie.Poster : Logo}\r\n                alt=\"Film logo\"/>\r\n          </div>\r\n          <div className=\"movie__details\">\r\n            <div className=\"movie__header\">\r\n              <h2 className=\"movie__title\">\r\n                {isMovie.Title} ({isMovie.Year})\r\n              </h2>\r\n              {isMovie.imdbRating !== \"N/A\" &&\r\n                <div className=\"movie__rating\">\r\n                  <div className=\"star-logo\" />\r\n                  <div className=\"rating__score\">\r\n                    <p>{isMovie.imdbRating}/10</p>\r\n                    <p></p>\r\n                  </div>\r\n                </div>\r\n              }\r\n            </div>\r\n            <article className=\"movie__description description\">\r\n              <div className=\"description__item\">\r\n                <h4>Country: </h4>\r\n                <p>{isMovie.Country}</p>\r\n              </div>\r\n              <div className=\"description__item\">\r\n                <h4>Genre: </h4>\r\n                <p>{isMovie.Genre}</p>\r\n              </div>\r\n              <div className=\"description__item\">\r\n                <h4>Runtime: </h4>\r\n                <p>{isMovie.Runtime}</p>\r\n              </div>\r\n              <div className=\"description__item\">\r\n                <h4>Director: </h4>\r\n                <p>{isMovie.Director}</p>\r\n              </div>\r\n              <div className=\"description__item\">\r\n                <h4>Writer: </h4>\r\n                <p>{isMovie.Writer}</p>\r\n              </div>\r\n              <div className=\"description__item\">\r\n                <h4>Actors: </h4>\r\n                <p>{isMovie.Actors}</p>\r\n              </div>\r\n              <div className=\"description__item\">\r\n                <h4>Language: </h4>\r\n                <p>{isMovie.Language}</p>\r\n              </div>\r\n              <div className=\"description__item\">\r\n                <h4>Production: </h4>\r\n                <p>{isMovie.Production}</p>\r\n              </div>\r\n              <div className=\"movie__plot\">\r\n                <h4>Plot: </h4>\r\n                <p>{isMovie.Plot}</p>\r\n              </div>\r\n            </article>\r\n          </div>\r\n        </>\r\n        :\r\n        <Loader />\r\n      }\r\n    </section>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport cn from 'classnames';\r\nimport './MovieForm.scss';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getError, getFilter } from '../../redux/store';\r\nimport { setFilter } from '../../redux/filter';\r\nimport { setError } from '../../redux/error';\r\nimport { setPage } from '../../redux/currentPage';\r\n\r\nexport const MovieForm = ({ errorNotice, setErrorNotice }) => {\r\n  const dispatch = useDispatch();\r\n  const query = useSelector(getFilter);\r\n  const errorMassage = useSelector(getError);\r\n  const [value, setValue] = useState(query);\r\n  \r\n  useEffect(() => {\r\n    setValue('');\r\n\r\n  }, [query])\r\n\r\n  \r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (value === '') {\r\n        dispatch(setError('Please enter the movie you are interested in'));\r\n        setErrorNotice(true);\r\n        return\r\n      }\r\n      dispatch(setFilter(value));\r\n      dispatch(setPage(1));\r\n      setValue('');\r\n  }\r\n  \r\n  return (\r\n    <>\r\n      <form\r\n        className=\"form movies-form\"\r\n        onSubmit={(event) => {\r\n          handleSubmit(event)\r\n        }}\r\n      >\r\n        <div className=\"form__control\">\r\n          <input\r\n            className={cn('form__input', {'form__input-error': errorNotice,}\r\n              )}\r\n            type=\"text\"\r\n            id=\"movie-title\"\r\n            value={value.trimLeft()}\r\n            placeholder=\"Enter a title to search\"\r\n            onChange={(e) => {\r\n              setValue(e.target.value);\r\n              setErrorNotice(false);\r\n            }}\r\n          />\r\n          <button\r\n            type=\"submit\"\r\n            className=\"form__button\"\r\n          >\r\n            Search\r\n          </button>\r\n        </div>\r\n      </form>\r\n      {errorNotice &&\r\n        <p className=\"form__error\">\r\n          {errorMassage}\r\n        </p>\r\n      }\r\n    </>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { setMovieId } from '../../redux/movieImdb';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom'\r\nimport { getMovies } from '../../redux/store';\r\nimport './MovieCard.scss';\r\nimport Logo from '../../assets/img/poster_none.png';\r\n\r\n\r\nexport const MovieCard = () => {\r\n  const movies = useSelector(getMovies);\r\n  const dispatch = useDispatch();\r\n\r\n    return (\r\n      <>\r\n        {movies.map(({ Title, Poster, Year, Type,  imdbID }) => (\r\n          <li\r\n            className=\"movies__card card\"\r\n            key={imdbID}\r\n            onClick={() => {\r\n              dispatch(setMovieId(imdbID))\r\n            }}\r\n          >\r\n            <Link to={`movie/i=${imdbID}`} >\r\n              <div className=\"card__image\">\r\n                <figure>\r\n                  <img\r\n                    className=\"image image--poster\"\r\n                    src={Poster !== \"N/A\" ? Poster : Logo}\r\n                    alt=\"Film logo\"/>\r\n                </figure>\r\n              </div>\r\n              <p className=\"card__title\">\r\n                {Title} ({Year})\r\n              </p>\r\n              <button\r\n                className=\"card__details\"\r\n                type=\"button\"\r\n              >\r\n                More details\r\n              </button>\r\n              <span className=\"card__type\">\r\n                {Type}\r\n              </span>\r\n            </Link>\r\n          </li>\r\n          )\r\n        )}\r\n        \r\n      </>\r\n    )\r\n}\r\n\r\nMovieCard.propTypes = {\r\n  movies: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      Title: PropTypes.string.isRequired,\r\n      Year: PropTypes.string.isRequired,\r\n      Type: PropTypes.string.isRequired,\r\n      imdbID: PropTypes.string.isRequired,\r\n      Poster: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n  ).isRequired,\r\n};\r\n\r\n","import React from 'react';\r\nimport { MovieCard } from '../MovieCard/MovieCard';\r\n\r\nexport const MovieList = () => {\r\n    return (\r\n      <ul className=\"movies movies__list\">\r\n        <MovieCard />\r\n      </ul>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport cn from 'classnames';\r\nimport { setPage } from '../../redux/currentPage';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getCurrentPage } from '../../redux/store';\r\n\r\n\r\nexport const Pagination = ({ totalMovies }) => {\r\n  const dispatch = useDispatch();\r\n  const currentPage = useSelector(getCurrentPage)\r\n  \r\n  const numbers = [];\r\n  const lastPageNumber = Math.ceil(totalMovies / 10);\r\n  \r\n  const changePage = (page) => {\r\n    dispatch(setPage(page));\r\n  }\r\n  \r\n  for (let i = 1; i <= lastPageNumber; i++) {\r\n    numbers.push(i);\r\n  }\r\n\r\n    return (\r\n      <nav className=\"nav__pagination\">\r\n        <ul className=\"pagination pagination__list\">\r\n          <li className=\"pagination__item\">\r\n            <button\r\n              className={cn(\r\n                \"pagination__button\",\r\n                \"pagination__button--first\",\r\n                 {'button-disabled' : currentPage === 1}\r\n              )}\r\n              onClick={() =>  changePage(1)}\r\n              disabled={currentPage === 1}\r\n            >\r\n            </button>\r\n          </li>\r\n          <li className=\"pagination__item\">\r\n            <button\r\n              type=\"button\"\r\n              aria-label=\"Go left\"\r\n              className={cn(\r\n                \"pagination__button\",\r\n                \"pagination__button--left\",\r\n                {'button-disabled' : currentPage === 1}\r\n              )}\r\n              onClick={() => changePage(currentPage - 1)}\r\n            >\r\n            </button>\r\n          </li>\r\n        \r\n          {numbers.slice(currentPage > 4 ? currentPage - 4 : 0, currentPage + 3).map(number => (\r\n             <li className=\"pagination__item\"\r\n                 key={number}\r\n             >\r\n               <button\r\n                 onClick={() => {\r\n                   changePage(number);\r\n                   window.scrollTo(145, 150);\r\n                 }}\r\n                 className={cn({\r\n                   'pagination__button': true,\r\n                   'pagination__button--active': number === currentPage,\r\n                 })}\r\n               >\r\n                 {number}\r\n               </button>\r\n             </li>\r\n          ))}\r\n          <li className=\"pagination__item\">\r\n            <button\r\n              type=\"button\"\r\n              aria-label=\"Go right\"\r\n              className={cn(\r\n                \"pagination__button\",\r\n                \"pagination__button--right\",\r\n                {'button-disabled' : currentPage === numbers.length}\r\n              )}\r\n              onClick={() => changePage(currentPage + 1)}\r\n            >\r\n            </button>\r\n          </li>\r\n          <li className=\"pagination__item\">\r\n            <button\r\n              className={cn(\r\n                \"pagination__button\",\r\n                \"pagination__button--last\",\r\n                {'button-disabled' : currentPage === numbers.length}\r\n              )}\r\n              onClick={() => changePage(lastPageNumber)}\r\n            >\r\n            </button>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    )\r\n\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './HistorySearch.scss';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getHistorySearch } from '../../redux/store';\r\nimport { refreshSearchMovie } from '../../redux/historySearch';\r\nimport { setFilter } from '../../redux/filter';\r\nimport { setPage } from '../../redux/currentPage';\r\n\r\n\r\nexport const HistorySearch = ({ handleClear, setErrorNotice }) => {\r\n  const dispatch = useDispatch();\r\n  const history = useSelector(getHistorySearch);\r\n  \r\n  useEffect(() => {\r\n    if(history.length > 10) {\r\n      dispatch(refreshSearchMovie())\r\n    }\r\n  }, [history])\r\n  \r\n\r\n  return (\r\n    <>\r\n      {history.length > 0 &&\r\n        <div className=\"history\">\r\n          <button\r\n            className=\"history__clear\"\r\n            onClick={() => {\r\n              handleClear()\r\n            }}\r\n          >\r\n            Clear\r\n          </button>\r\n          <ul className=\"history__list\">\r\n            <li className=\"history__item--title\">\r\n              <p className=\"history__title\">\r\n                Search history:\r\n              </p>\r\n            </li>\r\n            {history.map((query) => (\r\n              <li\r\n                className=\"history__item\"\r\n                key={query}\r\n              >\r\n                <button\r\n                  className=\"history__button\"\r\n                  onClick={() => {\r\n                    dispatch(setFilter(query));\r\n                    dispatch(setPage(1));\r\n                    setErrorNotice(false)\r\n                  }}\r\n                >\r\n                  {query}\r\n                </button>\r\n              </li>\r\n            ))\r\n            }\r\n          </ul>\r\n        </div>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nHistorySearch.propTypes = {\r\n  handleClear: PropTypes.func.isRequired,\r\n  setErrorNotice: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\n\r\nexport const HelloMarakas = () => (\r\n  <div className=\"hello__marakas\">\r\n    <img src=\"https://marakasdesign.com/wp-content/themes/semplice/images/eye.gif\" alt=\"eye\"/>\r\n  </div>\r\n)\r\n","import React, { useEffect, useState } from 'react'\r\nimport './MainPage.scss';\r\nimport { MovieForm } from '../MovieForm/MovieForm';\r\nimport { MovieList } from '../MovieList/MovieList';\r\nimport { Pagination } from '../Pagination/Pagination';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  getCurrentPage,\r\n  getFilter,\r\n  getHistorySearch,\r\n  getLoading,\r\n  getMovies\r\n} from '../../redux/store';\r\nimport { setLoading } from '../../redux/loading';\r\nimport * as api from '../../helpers/api/api';\r\nimport { setError } from '../../redux/error';\r\nimport { setClearMovies, setMovies } from '../../redux/movies';\r\nimport { HistorySearch } from '../HistorySearch/HistorySearch';\r\nimport { clearSearchMovie, setNewSearchMovie } from '../../redux/historySearch';\r\nimport { setFilter } from '../../redux/filter';\r\nimport { HelloMarakas } from '../../helpers/HelloMarakas';\r\n\r\nexport const MainPage = () => {\r\n  const dispatch = useDispatch();\r\n  const movies = useSelector(getMovies);\r\n  const isLoading = useSelector(getLoading);\r\n  const currentPage = useSelector(getCurrentPage)\r\n  const history = useSelector(getHistorySearch);\r\n  const movieTitle = useSelector(getFilter);\r\n  \r\n  const [notice, setNotice] = useState(false);\r\n  const [totalMovies, setTotalMovies] = useState(0);\r\n  \r\n  const changeHistory = (query) => {\r\n    if (history.includes(query)) {\r\n      dispatch(setFilter(query));\r\n\r\n    } else {\r\n      dispatch(setNewSearchMovie(query))\r\n    }\r\n  }\r\n  \r\n  const loadMovies = async() => {\r\n    dispatch(setLoading(true));\r\n    \r\n    try {\r\n      api.getMovies(movieTitle, currentPage)\r\n        .then((moviesFromServer) => {\r\n          if (moviesFromServer.Response !== 'False') {\r\n            const action = setMovies(moviesFromServer.Search);\r\n  \r\n            dispatch(action);\r\n            setTotalMovies(moviesFromServer.totalResults);\r\n            changeHistory(movieTitle)\r\n            return\r\n          }  else if (movieTitle === '') {\r\n            dispatch(setLoading(false));\r\n            setNotice(false);\r\n            return\r\n          }\r\n    \r\n          dispatch(setError('Movie not found, please try again'));\r\n          setNotice(true);\r\n        })\r\n    } catch (error) {\r\n      dispatch(setError('Failed to load movies, sorry, please try again'));\r\n      dispatch(setLoading(false));\r\n    }\r\n  };\r\n  \r\n  \r\n  useEffect(() => {\r\n    loadMovies();\r\n  }, [movieTitle, currentPage]);\r\n  \r\n  const handleClear = () => {\r\n    dispatch(clearSearchMovie());\r\n    dispatch(setClearMovies());\r\n    dispatch(setLoading(false));\r\n    setNotice(false);\r\n    window.localStorage.clear();\r\n    setTotalMovies(0);\r\n  }\r\n  \r\n  return (\r\n    <main className=\"page-content\">\r\n      <header className=\"header\">\r\n        <h1 className=\"header__title\">\r\n          Who seeks shall find :)\r\n        </h1>\r\n        <MovieForm\r\n          loadMovies={loadMovies}\r\n          errorNotice={notice}\r\n          setErrorNotice={setNotice}\r\n        />\r\n        <HistorySearch\r\n          handleClear={handleClear}\r\n          setErrorNotice={setNotice}\r\n        />\r\n      </header>\r\n      \r\n      {isLoading ?\r\n        <MovieList movies={movies} />\r\n        :\r\n        <HelloMarakas />\r\n      }\r\n  \r\n      {totalMovies > 40 &&\r\n        <Pagination totalMovies={totalMovies}/>\r\n      }\r\n    </main>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\n\r\nimport './App.scss';\r\n\r\nimport { MovieDetails } from \"./components/MovieDetails/MovieDetails\";\r\nimport { MainPage } from \"./components/MainPage/MainPage\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Switch>\r\n        <Route path=\"/\" exact component={MainPage}/>\r\n        <Route path=\"/movie/i=:movieId?\" exact component={MovieDetails}/>\r\n      </Switch>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.scss';\r\nimport './components/Pagination/pagination.scss';\r\nimport './components/MovieList/MovieList.scss'\r\n\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nimport App from './App';\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n      <HashRouter>\r\n        <App />\r\n      </HashRouter>\r\n    </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}